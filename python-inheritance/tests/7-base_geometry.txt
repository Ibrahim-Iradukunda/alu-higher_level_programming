>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Test instantiation
>>> bg = BaseGeometry()
>>> isinstance(bg, BaseGeometry)
True

# Test area() method raises Exception
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Test integer_validator with valid inputs
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("age", 1)

# Test integer_validator with invalid inputs
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("age", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("age", "4")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", (4,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", [3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", {3, 4})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

